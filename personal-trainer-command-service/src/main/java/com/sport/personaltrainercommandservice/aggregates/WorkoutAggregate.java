package com.sport.personaltrainercommandservice.aggregates;

import static org.axonframework.modelling.command.AggregateLifecycle.apply;

import com.sport.personaltrainercommandservice.commands.AppointWorkoutCommand;
import com.sport.personaltrainercommandservice.commands.ConfirmWorkoutCommand;
import com.sport.personaltrainercommandservice.commands.SetWorkoutExercisesCommand;
import com.sport.personaltrainerecentscommon.AppointWorkoutEvent;
import com.sport.personaltrainerecentscommon.ConfirmWorkoutEvent;
import com.sport.personaltrainerecentscommon.SetWorkoutExercisesEvent;
import java.util.stream.Collectors;
import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.spring.stereotype.Aggregate;


@Aggregate
public class WorkoutAggregate {

  // @AggregateIdentifier used to identify commands, and need to be unique for all commands events
  @AggregateIdentifier
  private String workoutAggregateId;


  protected WorkoutAggregate() {
    // Required by Axon to build a default Aggregate prior to Event Sourcing
  }

  @CommandHandler
  public WorkoutAggregate(AppointWorkoutCommand appointWorkoutCommand) {

    apply(new AppointWorkoutEvent(appointWorkoutCommand.getWorkoutId(),
        appointWorkoutCommand.getTrainerId(),
        appointWorkoutCommand.getTrainerName(), appointWorkoutCommand.getApprenticeId(),
        appointWorkoutCommand.getApprenticeName(),
        appointWorkoutCommand.getWorkoutDate(), appointWorkoutCommand.getSession()));
  }

  /**
   * Marker annotation to mark any method on an object as being a CommandHandler.
   * Use the AnnotationCommandHandlerAdapter to subscribe the annotated class to the command bus.
   * This annotation can also be placed directly on Aggregate members to have it handle the commands directly.
   */
  @CommandHandler
  public WorkoutAggregate(SetWorkoutExercisesCommand workoutExercisesCommand) {

    // Use apply method from AggregateLifecycle class.
    // Applying events means they are immediately applied (published) to the aggregate
    // and scheduled for publication to other event handlers.
    apply(new SetWorkoutExercisesEvent(workoutExercisesCommand.getWorkoutId(),
        workoutExercisesCommand.getExercises().stream().map(Enum::toString)
            .collect(Collectors.toSet())));

  }

  @CommandHandler
  public WorkoutAggregate(ConfirmWorkoutCommand confirmWorkoutCommand) {

    apply(new ConfirmWorkoutEvent(confirmWorkoutCommand.getWorkoutId()));
  }

  /**
   * Annotation that marks a method in an Aggregate as a handler for Events generated by that aggregate
   */
  @EventSourcingHandler
  public void on(AppointWorkoutEvent event) {
    // Set aggregate identifier for event
    this.workoutAggregateId = event.getWorkoutId() + "-AppointWorkoutEvent";
  }

  @EventSourcingHandler
  public void on(SetWorkoutExercisesEvent event) {
    this.workoutAggregateId = event.getWorkoutId() + "-SetWorkoutExercisesEvent";
  }

  @EventSourcingHandler
  public void on(ConfirmWorkoutEvent event) {
    this.workoutAggregateId = event.getWorkoutId() + "-ConfirmWorkoutEvent";
  }

}
